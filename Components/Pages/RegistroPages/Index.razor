@page "/Aportes/Index"
@inject NavigationManager navigationManager
@inject AportesService aportesService
@rendermode InteractiveServer
@using Imanol_Acosta_Ap1_P1.Models
@using Imanol_Acosta_Ap1_P1.Services

<PageTitle>Registro de aportes</PageTitle>
<div class="container mt-3">
    <div class="card shadow-lg">
        <div class="card-header">
            <h5 class="text-center">Consulta de aportes</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Filtrar</option>
                        <option value="AporteId">AporteId</option>
                        <option value="Fecha">Fecha</option>
                        <option value="Nombre">Nombre</option>
                    </InputSelect>
                </div>

                <div class="col-4 text-end">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <span class="bi bi-search"></span>
                        </button>
                        <div class="col-4 text-end">
                            <a href="/Aportes/Create" class="btn btn-success">
                                <span class="bi bi-plus-square"></span> Crear
                            </a>
                        </div>
                    </div>
                    
                </div>

                <div class="row mt-3">
                    <div class="col-3">
                        <label class="col-form-label"><strong>Desde</strong></label>
                        <InputDate class="form-control" @bind-Value="Desde"></InputDate>
                    </div>

                    <div class="col-3">
                        <label class="col-form-label"><strong>Hasta</strong></label>
                        <div class="input-group">
                            <InputDate class="form-control" @bind-Value="Hasta"></InputDate>
                        </div>
                    </div>
                </div>
            </div>

            <table class="table table-hover">
                <thead class="table table-striped text-black">
                    <tr>
                        <th>AporteID</th>
                        <th>Fecha</th>
                        <th>Nombre</th>
                        <th>Monto</th>
                        <th>Editar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var aporte in ListaAportes)
                    {
                        <tr>
                            <td>@aporte.AporteID</td>
                            <td>@aporte.Fecha.ToString("dd/MM/yyyy")</td>
                            <td>@aporte.Nombres</td>
                            <td>@aporte.Monto.ToString("N2")</td>
                            <td class="text-center">
                            </td>
                            <td class="text-center">
                                <a class="btn btn-outline-primary bi bi-pencil-square" href="/Aportes/Edit/@aporte.AporteID"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer d-flex justify-content-between">
            <label>Conteo: @ListaAportes.Count</label>
            <label>Total: @ListaAportes.Sum(a => a.Monto).ToString("N2")</label>
        </div>
    </div>
</div>


@code {
    public List<Aporte> ListaAportes { get; set; } = new List<Aporte>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; }
    public DateTime? Hasta { get; set; }
    private bool mostrarModalEliminar = false;
    private int aporteIdEliminar = 0;

    protected override async Task OnInitializedAsync()
    {
        ListaAportes = await aportesService.Listar(a => a.AporteID > 0);
        Desde = null;
        Hasta = null;
    }

    private async Task Buscar()
    {
        if (Filtro == "AporteId")
        {
            if (int.TryParse(ValorFiltro, out int AporteId))
            {
                ListaAportes = await aportesService.Listar(a => a.AporteID == AporteId);
            }
        }
        else if (Filtro == "Fecha")
        {
            ListaAportes = await aportesService.Listar(a => a.Fecha >= Desde && a.Fecha <= Hasta);
        }
        else if (ValorFiltro.Trim() != "" && Filtro == "Nombre")
        {
            ListaAportes = await aportesService.Listar(a => a.Nombres != null && a.Nombres.ToLower().Contains(ValorFiltro.ToLower()));
        }
    }

    private async Task Restablecer()
    {
        ListaAportes = await aportesService.Listar(a => a.AporteID > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
        Desde = null;
        Hasta = null;
    }

    private void ConfirmarEliminar(int id)
    {
        aporteIdEliminar = id;
        mostrarModalEliminar = true;
    }

    private void CancelarEliminar()
    {
        mostrarModalEliminar = false;
        aporteIdEliminar = 0;
    }

    private async Task EliminarAporte()
    {
        try
        {
            var aporte = ListaAportes.FirstOrDefault(a => a.AporteID == aporteIdEliminar);
            if (aporte != null)
            {
                ListaAportes.Remove(aporte);
            }

            mostrarModalEliminar = false;
            aporteIdEliminar = 0;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar: {ex.Message}");
        }
    }
}